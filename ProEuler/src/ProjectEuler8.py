#!/usr/bin/python

'''
!!! I misunderstand the question so I wrote an ordering function, it is not neccesry !!!

Largest product in a series
Problem 8
Published on Friday, 11th January 2002, 06:00 pm; Solved by 120056

Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''

#start here

thestr='''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''

astr=thestr.replace('\n','')

print(astr.isdigit())   #is all digital in str?

def findPos(alist,num):
    if len(alist) == 0:     #if the list is empty, put in first
        return 0

    if num>=alist[0]:     #if the list is not empty and the number is larger than the first, put it on first
        return 0

    if len(alist) ==1:      #if the list has only 1 member, if number > the member put on first
        if num >= alist[0]:
            return 0
        else:
            return 1

#if the list has more than 2 members, compare them
    length = len(alist)
    for i in range(0, length-2):  #if [5,3,1] then i from 0 to 1
        if (alist[i] >= num) and (num >= alist[i+1]):   # 4 < 5 and 4> 3, return 1
            print (str(num) +" at " + str(i))
            return i+1

    if num>=alist[length-1]:#compare the last member of the list with the number
        return length-1

    return length


decList=[]
for h in range(0, len(astr)-4):
    a=int(astr[h]) * int(astr[h+1]) * int(astr[h+2]) * int(astr[h+3]) * int(astr[h+4])
    pos = findPos(decList,a)
    #print(decList)
    #print("pos = {0} and number={1}".format(pos,a))
    decList.insert(pos,a)

print(decList[0])